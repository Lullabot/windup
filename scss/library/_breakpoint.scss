//
//  Documentation @ codepen.io/wesruv/pen/eIpuv
//
// List of all breakpoints, and their minimum width
// Human names can be changed, they will be used for $breakpoint param on breakpoint mixin
$all-breakpoints: (
  ('huge',  1200px),
  ('large',  960px),
  ('medium', 720px),
  ('small',  480px),
  ('tiny') // Last index should not have a value, it's min value will essentially be 0
);

// Used to determine max value, should be approximately 1px (if not exactly 1px)
$smallest-unit: 1px;

///
// Breakpoint mixin, to use declare
// +breakpoint('breakpointName')
// Documentation @ codepen.io/wesruv/pen/eIpuv
// @param  $breakpoint    string    Human name for breakpoint desired,
// @param  $up-or-down    string    Optional, decides if styles should apply to breakpoint 'and up',
//                                  'and down', or leave blank for to apply styles to just
//                                  the specified breakpoint
// @param  $px-ratio      integer   Optional, used to target displays of a certain pixel density
///
@mixin breakpoint($breakpoint, $up-or-down: null, $px-ratio: null){
  // Variable to track if the breakpoint the user asked for exists
  $breakpoint_exists: false;

  // Set min res & o-px-ratio if px-ratio is set
  $min-resolution: null;
  $o-px-ratio: null;
  @if ($px-ratio != null) {
    $min-resolution: #{round(96 * $px-ratio) + dpi};

  }

  // Iterate through list of breakpoints
  // Using for instead of each to get the index for free which is very useful
  @for $i from 1 through length($all-breakpoints) {
    // Get the breakpoint name
    $current-breakpoint: nth($all-breakpoints, $i);
    // Get the breakpoint min-width
    $current-breakpoint-name : nth($current-breakpoint, 1);

    // Are we on the largest or smallest breakpoint
    $largest-breakpoint: if($i == 1, true, false);
    $smallest-breakpoint: if($i == length($all-breakpoints), true, false);

    $largest-or-smallest: false;
    @if $largest-breakpoint {
      @if $smallest-breakpoint {
        $largest-or-smallest: true;
      }
    }

    // If the for statement is on the breakpoint asked for
    @if ($current-breakpoint-name == $breakpoint) {
      $breakpoint_exists: true;

      // Get minimum value
      $breakpoint-min: null;
      @if ($smallest-breakpoint == false){
        $breakpoint-min: nth($current-breakpoint, 2);
      }

      // Get Maximum value
      $previous-breakpoint-min: null;
      $breakpoint-max: null;
      @if ($largest-breakpoint == false){
        $previous-breakpoint: nth($all-breakpoints, $i - 1);
        $previous-breakpoint-min: nth($previous-breakpoint, 2);
        $breakpoint-max: $previous-breakpoint-min - $smallest-unit;
      }

      // Unset breakpoint-min if the breakpoint is to be and down
      @if ($up-or-down == 'and down') {
        $breakpoint-min: null;
      }

      // Unset breakpoint-max if the breakpoint is to be and up
      @if ($up-or-down == 'and up') {
        $breakpoint-max: null;
      }

      // Evaluate if both min and max values have been set
      $breakpoint-min-and-max: false;
      @if ($breakpoint-min != null) {
        @if ($breakpoint-max != null) {
          $breakpoint-min-and-max: true;
        }
      }

      @if ($smallest-breakpoint){
        @if ($up-or-down == 'and up') {
          // If smallest breakpoint and up
          @warn "Called the smallest breakpoint and up (which is everything)";
          @content;
        }
      }
      @else if ($largest-breakpoint){
        @if ($up-or-down == 'and down') {
          // If largest breakpoint and down
          $largest-and-down: true;
          @warn "Called the largest breakpoint and down (which is everything)";
          @content;
        }
      }

      // Just this breakpoint
      @if ($breakpoint-min-and-max){
        // No pixel ratio
        @if($px-ratio == null){
          @media
          only screen
          and (min-width: $breakpoint-min)
          and (max-width: $breakpoint-max) {
            @content;
          }
        }

        // Pixel ratio is specified
        @else {
          @media
            only screen
            and (-webkit-min-device-pixel-ratio: $px-ratio)
            and (min-width: $breakpoint-min)
            and (max-width: $breakpoint-max),
            only screen
            and (min-resolution: $min-resolution)
            and (min-width: $breakpoint-min)
            and (max-width: $breakpoint-max) {
            @content;
          }
        }
      }

      // This breakpoint and up
      @else if ($breakpoint-min != null){
        // No pixel ratio
        @if ($px-ratio == null){
          @media
          only screen
          and (min-width: $breakpoint-min) {
            @content;
          }
        }

        // Pixel ratio is specified
        @else {
          @media
            only screen
            and (-webkit-min-device-pixel-ratio: $px-ratio)
            and (min-width: $breakpoint-min),
            only screen
            and (min-resolution: $min-resolution)
            and (min-width: $breakpoint-min) {
            @content;
          }
        }
      }

      // This breakpoint and down
      @else if ($breakpoint-max != null){
        // No pixel ratio
        @if ($px-ratio == null){
          @media
          only screen
          and (max-width: $breakpoint-max) {
            @content;
          }
        }

        // Pixel Ratio is specified
        @else {
          @media
            only screen
            and (-webkit-min-device-pixel-ratio: $px-ratio)
            and (max-width: $breakpoint-max),
            only screen
            and (min-resolution: $min-resolution)
            and (max-width: $breakpoint-max) {
            @content;
          }
        }
      }
    }
  }

  // If the for statement didn't turn up a match, throw an error
  @if ($breakpoint_exists == false) {
    @warn 'Breakpoint "' + $breakpoint + '" does not seem to exist, please check your spelling.';
  }
}

///
// Adds a small message to indicate what breakpoint the current view is at
// @param $vertical-position    string    Should be set to top or bottom
// @param $horizontal-position  string    Should be set to left or right
///
@mixin debug-breakpoints($vertical-position: top, $horizontal-position: left){
  // Basic styles for tooltip
  body:before {
    display: block;
    position: fixed;
    z-index: 9999;
    #{$vertical-position}: 0;
    #{$horizontal-position}: 0;
    padding: .7em 1em;
    background: rgba(0, 0, 0, 0.8);
    color: #fff;
    line-height: 1em;
    font-weight: 600;

    @for $i from 1 through length($all-breakpoints) {
      // Are we on the largest or smallest breakpoint
      $largest-breakpoint: false;
      $smallest-breakpoint: false;
      $is-largest-or-smallest: false;
      @if ($i == 1) {
        $largest-breakpoint: true;
        $is-largest-or-smallest: true;
      }
      @else if ($i == length($all-breakpoints)){
        $smallest-breakpoint: true;
        $is-largest-or-smallest: true;
      }

      // Get the breakpoint from the index we're on
      $current-breakpoint: nth($all-breakpoints, $i);
      $current-breakpoint-name : nth($current-breakpoint, 1);

      // Only do regular breakpoint if it's the largest or smallest
      @include breakpoint($current-breakpoint-name){
        content: $current-breakpoint-name;
      }
    }
  }
}
